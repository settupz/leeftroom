import os
import json
import random
import threading
from datetime import datetime
from flask import Flask
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, CallbackQueryHandler
)
from geopy.geocoders import Nominatim

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 959818938))
geolocator = Nominatim(user_agent="leeftroom_bot")

(REGISTER, AGE, CITY, BIO, PHOTO, MENU, EDIT_MENU,
 EDIT_NAME, EDIT_AGE, EDIT_BIO, EDIT_PHOTO, EDIT_CITY) = range(12)

LOG_FILE = "bot_activity.log"
USERS_FILE = "users.json"
LIKES_FILE = "likes.json"
DISLIKED_FILE = "disliked.json"

users = {}
likes = {}
disliked = {}
viewing_profiles = {}

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò –ò –õ–û–ì–ê–ú–ò ---

def log_action(message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")

def load_data(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
                return {int(k): v for k, v in data.items()}
            except json.JSONDecodeError:
                return {}
    return {}

def save_data(data, file_path):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def get_main_keyboard(user_id):
    buttons = [
        ["üßç‚Äç‚ôÇÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"],
        ["üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"]
    ]
    if user_id == ADMIN_ID:
        buttons.append(["üìÅ –í—Å–µ –∞–Ω–∫–µ—Ç—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def get_edit_keyboard():
    buttons = [
        ["–ò–º—è", "–í–æ–∑—Ä–∞—Å—Ç"],
        ["–ì–æ—Ä–æ–¥", "–û —Å–µ–±–µ"],
        ["–§–æ—Ç–æ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    log_action(f"User {user_id} started interaction.")
    if user_id in users and users.get(user_id, {}).get('photo_id'):
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=get_main_keyboard(user_id)
        )
        return MENU

    users[user_id] = {}
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    return REGISTER

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=get_main_keyboard(user_id)
    )
    return MENU

# --- –õ–û–ì–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users[update.effective_user.id]["name"] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
    return AGE

async def register_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit() or not 14 < int(update.message.text) < 100:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return AGE
    users[update.effective_user.id]["age"] = int(update.message.text)
    button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)
    return CITY

async def register_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city_name = ""
    try:
        if update.message.location:
            location = update.message.location
            location_data = geolocator.reverse((location.latitude, location.longitude), language='ru')
            city_name = location_data.raw.get("address", {}).get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        elif update.message.text:
            location_data = geolocator.geocode(update.message.text, language='ru')
            if location_data:
                city_name = update.message.text
            else:
                await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                return CITY

        users[user_id]["city"] = city_name
        await update.message.reply_text(f"–¢–≤–æ–π –≥–æ—Ä–æ–¥: {city_name}. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:", reply_markup=ReplyKeyboardRemove())
        return BIO
    except Exception as e:
        log_action(f"Geopy error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
        return CITY

async def register_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users[update.effective_user.id]["bio"] = update.message.text
    await update.message.reply_text("–°—É–ø–µ—Ä! –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ.")
    return PHOTO

async def register_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return PHOTO

    users[user_id]["photo_id"] = update.message.photo[-1].file_id
    save_data(users, USERS_FILE)
    log_action(f"New user registered: {user_id}, name: {users[user_id]['name']}")

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        reply_markup=get_main_keyboard(user_id)
    )
    return MENU

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ü–†–û–°–ú–û–¢–† –ê–ù–ö–ï–¢ ---

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_id not in users or not users[user_id].get("photo_id"):
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Ç–≤–æ—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. /start")
        return await start(update, context)

    if text == "üßç‚Äç‚ôÇÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await show_my_profile(update, context)
    elif text == "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç":
        await show_next_profile(update.message, context)
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        await update.message.reply_text("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_keyboard())
        return EDIT_MENU
    elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        await about_project(update, context)
    elif text == "üìÅ –í—Å–µ –∞–Ω–∫–µ—Ç—ã" and user_id == ADMIN_ID:
        await show_all_profiles(update, context)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and user_id == ADMIN_ID:
        await show_stats(update, context)

    return MENU

def get_profile_caption(user_data):
    return (
        f"<b>{user_data.get('name', '')}, {user_data.get('age', '')}</b>\n"
        f"üìç {user_data.get('city', '')}\n\n"
        f"{user_data.get('bio', '')}"
    )

async def show_my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = users.get(user_id)
    if user_data and user_data.get("photo_id"):
        caption = get_profile_caption(user_data)
        await update.message.reply_photo(
            photo=user_data["photo_id"],
            caption=caption,
            parse_mode='HTML'
        )

def liked_or_disliked_set(user_id):
    user_likes = set(likes.get(user_id, []))
    user_dislikes = set(disliked.get(user_id, []))
    return user_likes | user_dislikes

async def show_next_profile(message, context: ContextTypes.DEFAULT_TYPE):
    user_id = message.from_user.id
    viewed_ids = liked_or_disliked_set(user_id)
    candidates = [uid for uid in users if uid != user_id and uid not in viewed_ids and users[uid].get('photo_id')]

    if not candidates:
        await message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ.")
        return

    target_id = random.choice(candidates)
    viewing_profiles[user_id] = target_id
    target_data = users[target_id]

    caption = get_profile_caption(target_data)
    buttons = [
        [
            InlineKeyboardButton("üëç", callback_data=f"like_{target_id}"),
            InlineKeyboardButton("üëé", callback_data=f"dislike_{target_id}")
        ]
    ]

    await message.reply_photo(
        photo=target_data["photo_id"],
        caption=caption,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )

async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    action, target_id_str = query.data.split("_")
    target_id = int(target_id_str)

    await query.edit_message_reply_markup(reply_markup=None)

    if action == "like":
        likes.setdefault(user_id, []).append(target_id)
        save_data(likes, LIKES_FILE)
        log_action(f"User {user_id} liked user {target_id}")
        await context.bot.send_message(user_id, f"–í—ã –ª–∞–π–∫–Ω—É–ª–∏ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[target_id]['name']}!")

        if target_id in likes and user_id in likes.get(target_id, []):
            log_action(f"Mutual like between {user_id} and {target_id}")
            match_message = "üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!"
            try:
                target_chat = await context.bot.get_chat(target_id)
                user_chat = await context.bot.get_chat(user_id)
                await context.bot.send_message(user_id, f"{match_message} –í–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å: @{target_chat.username}")
                await context.bot.send_message(target_id, f"{match_message} –í–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å: @{user_chat.username}")
            except Exception as e:
                log_action(f"Error sending match notification: {e}")

    elif action == "dislike":
        disliked.setdefault(user_id, []).append(target_id)
        save_data(disliked, DISLIKED_FILE)
        log_action(f"User {user_id} disliked user {target_id}")
        await context.bot.send_message(user_id, "–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

    await show_next_profile(query.message, context)

# --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ö–ï–¢–´ ---

async def handle_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    actions = {
        "–ò–º—è": (EDIT_NAME, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:"),
        "–í–æ–∑—Ä–∞—Å—Ç": (EDIT_AGE, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:"),
        "–ì–æ—Ä–æ–¥": (EDIT_CITY, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:"),
        "–û —Å–µ–±–µ": (EDIT_BIO, "–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ —Å–µ–±–µ:"),
        "–§–æ—Ç–æ": (EDIT_PHOTO, "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:"),
    }
    if text in actions:
        next_state, reply_text = actions[text]
        await update.message.reply_text(reply_text, reply_markup=ReplyKeyboardRemove())
        return next_state
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        return await cancel(update, context)
    return EDIT_MENU

async def edit_generic_text(update: Update, context: ContextTypes.DEFAULT_TYPE, field: str, state: int):
    user_id = update.effective_user.id
    new_value = update.message.text
    if field == "age" and (not new_value.isdigit() or not 14 < int(new_value) < 100):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return state
    users[user_id][field] = int(new_value) if field == "age" else new_value
    save_data(users, USERS_FILE)
    log_action(f"User {user_id} edited field {field}.")
    await update.message.reply_text(f"–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard(user_id))
    return MENU

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_generic_text(update, context, 'name', EDIT_NAME)
async def edit_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_generic_text(update, context, 'age', EDIT_AGE)
async def edit_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_generic_text(update, context, 'bio', EDIT_BIO)
async def edit_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_generic_text(update, context, 'city', EDIT_CITY)
async def edit_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return EDIT_PHOTO
    users[user_id]["photo_id"] = update.message.photo[-1].file_id
    save_data(users, USERS_FILE)
    log_action(f"User {user_id} edited photo.")
    await update.message.reply_text("–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard(user_id))
    return MENU

# --- –ü–†–û–ß–ò–ï –ò –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ---

async def about_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n–≠—Ç–æ —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–≤.\n"
        "–ê–≤—Ç–æ—Ä –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ: @haunithay",
    )

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        total_users = len(users)
        total_likes = sum(len(v) for v in likes.values())
        await update.message.reply_text(
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üôã‚Äç‚ôÇÔ∏è –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {total_users}\n"
            f"üëç –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {total_likes}",
            parse_mode='HTML'
        )

async def send_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        if os.path.exists(LOG_FILE):
            await update.message.reply_document(document=InputFile(LOG_FILE))

async def show_all_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        if not users:
            await update.message.reply_text("–ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é {len(users)} –∞–Ω–∫–µ—Ç...")
        for uid, udata in users.items():
            if udata.get("photo_id"):
                caption = get_profile_caption(udata) + f"\n\nID: <code>{uid}</code>"
                await update.message.reply_photo(photo=udata["photo_id"], caption=caption, parse_mode='HTML')

# --- –°–ë–û–†–ö–ê –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø –†–ê–ë–û–¢–´ 24/7 ---

def run_bot():
    global users, likes, disliked
    users = load_data(USERS_FILE)
    likes = load_data(LIKES_FILE)
    disliked = load_data(DISLIKED_FILE)

    log_action("Bot starting...")
    app = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REGISTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_age)],
            CITY: [MessageHandler(filters.LOCATION | (filters.TEXT & ~filters.COMMAND), register_city)],
            BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_bio)],
            PHOTO: [MessageHandler(filters.PHOTO, register_photo)],
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
            EDIT_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_menu)],
            EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
            EDIT_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_age)],
            EDIT_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_city)],
            EDIT_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_bio)],
            EDIT_PHOTO: [MessageHandler(filters.PHOTO, edit_photo)],
        },
        fallbacks=[CommandHandler("start", start), CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_button_press, pattern=r"^(like|dislike)_"))
    app.add_handler(CommandHandler("logs", send_logs))
    print("Bot is running...")
    app.run_polling()

flask_app = Flask(__name__)
@flask_app.route('/')
def home():
    return "I'm alive!"

if __name__ == "__main__":
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.start()
    port = int(os.environ.get('PORT', 5000))
    flask_app.run(host='0.0.0.0', port=port)